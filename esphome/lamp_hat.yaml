# Copyright (c) 2021 Daniel Kent
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# CWWW ESPHome configuration - Hat Variant

substitutions:
  lampname: desklamp
  lamp_name: desk_lamp
  human_lamp_name: "Desk Lamp"
  color_step: '2.25'
  color_min: '166.66666'
  color_max: '333.33333'
  pwm_rate: '50000Hz'
  pwm_encoder_rate: '200Hz'

esphome:
  name: ${lampname}
  comment: ${human_lamp_name}
  
logger:
  level: DEBUG
  baud_rate: 115200
  
rp2040:
  board: rpipicow
  
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  reboot_timeout: 0s
  ap:
    ssid: "${lampname}_fallback"
    password: !secret wifi_fallback_password
    ap_timeout: 120min


globals:
  - id: redshift
    type: bool
    restore_value: no
    initial_value: 'true'
  
  - id: BRIGHT_STEP
    type: int
    restore_value: yes
    initial_value: '10'
  
  - id: TEMP_STEP
    type: int
    restore_value: yes
    initial_value: '500'
    
  - id: TEMP_MSTEP
    type: float
    restore_value: yes
    initial_value: ${color_step}
    
  - id: TEMP_MAX
    type: float
    restore_value: yes
    initial_value: ${color_max}
  
  - id: TEMP_MIN
    type: float
    restore_value: yes
    initial_value: ${color_min}
      
api:
  encryption:
    key: !secret encryption_key
  id: ${lampname}

ota:
  platform: esphome
  password: !secret ota_password

light:
  - platform: cwww
    name: ${human_lamp_name}
    id: ${lamp_name}
    cold_white: cool_pin
    warm_white: warm_pin
    cold_white_color_temperature: 6000 K
    warm_white_color_temperature: 3000 K 
    constant_brightness: true

binary_sensor:
   - platform: gpio
     pin: 
       number: 6
       mode: INPUT_PULLDOWN
     id: button_bright_up
     on_click:
       min_length: 50ms
       max_length: 800ms
       then:
         - if:
             condition:
               light.is_on: ${lamp_name}
             then:
               - light.dim_relative:
                   id: ${lamp_name}
                   relative_brightness: 10%
                   transition_length: 0.5s
     on_press:
      - delay: 800ms
      - while:
          condition:
            binary_sensor.is_on: button_bright_up
          then:
            - light.dim_relative:
                id: ${lamp_name}
                relative_brightness: 3%
                transition_length: 100ms
            - delay: 100ms

   - platform: gpio
     pin: 
       number: 7
       mode: INPUT_PULLDOWN
     id: ${lamp_name}_button_temperature
     on_click:
       min_length: 50ms
       max_length: 800ms
       then:
         - if:
             condition:
               light.is_on: ${lamp_name}
             then:
             - logger.log: 'Temperature click'
             - light.control:
                 id: ${lamp_name}
                 transition_length: 250ms
                 color_temperature: !lambda |-
                   if(id(redshift) == true) {
                   if(id(${lamp_name}).current_values.get_color_temperature()-id(TEMP_STEP) <= id(TEMP_MIN)) {
                     id(redshift) = false;
                     return id(TEMP_MIN);
                   } else {
                     return id(${lamp_name}).current_values.get_color_temperature()-id(TEMP_STEP);
                   }
                   } else {
                   if(id(${lamp_name}).current_values.get_color_temperature()+id(TEMP_STEP) >= id(TEMP_MAX)) {
                     id(redshift) = true;
                     return id(TEMP_MAX);
                   }
                   else {
                     return id(${lamp_name}).current_values.get_color_temperature()+id(TEMP_STEP);
                   }
                   }
        
     on_press:
      - delay: 800ms
      - while:
          condition:
            binary_sensor.is_on: ${lamp_name}_button_temperature
          then:
           - logger.log: 'Temperature hold'
           - light.control:
                id: ${lamp_name}
                transition_length: 100ms
                color_temperature: !lambda |-
                  if(id(redshift) == true) {
                  if(id(${lamp_name}).current_values.get_color_temperature()-25 <= id(TEMP_MIN)) {
                    id(redshift) = false;
                    return id(TEMP_MIN);
                  } else {
                    return id(${lamp_name}).current_values.get_color_temperature()-id(TEMP_MSTEP);
                  }
                  } else {
                  if(id(${lamp_name}).current_values.get_color_temperature()+id(TEMP_MSTEP) >= id(TEMP_MAX)) {
                    id(redshift) = true;
                    return id(TEMP_MAX);
                  }
                  else {
                    return id(${lamp_name}).current_values.get_color_temperature()+25;
                  }
                  }
           - delay: 100ms

   - platform: gpio
     pin: 
       number: 8
       mode: INPUT_PULLDOWN
     id: button_bright_down
     on_click:
       min_length: 50ms
       max_length: 800ms
       then:
         - if:
             condition:
               light.is_on: ${lamp_name}
             then:
               - light.dim_relative:
                   id: ${lamp_name}
                   relative_brightness: 10%
                   transition_length: 0.5s


   - platform: gpio
     pin: 
       number: 9
       mode: INPUT_PULLDOWN
     id: ${lamp_name}_button_power
     on_click:
      then:
        - light.toggle: ${lamp_name}

output:
  - platform: rp2040_pwm
    pin: 10
    id: warm_pin
    frequency: ${pwm_rate}
 
  - platform: rp2040_pwm
    pin: 21
    id: cool_pin
    frequency: ${pwm_rate}

  - platform: gpio
    id: board_led
    pin:
      number: 32
      mode: output



